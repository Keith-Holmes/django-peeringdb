# -*- coding: utf-8 -*-
# Generated by Django 1.11.7 on 2018-10-08 23:07
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager
import django_countries.fields
import django_handleref.models
import django_inet.models
import django_peeringdb.models.abstract


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Facility',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('status', models.CharField(blank=True, max_length=255, verbose_name='Status')),
                ('created', django_handleref.models.CreatedDateTimeField(auto_now_add=True, verbose_name='Created')),
                ('updated', django_handleref.models.UpdatedDateTimeField(auto_now=True, verbose_name='Updated')),
                ('version', models.IntegerField(default=0)),
                ('address1', models.CharField(blank=True, max_length=255, verbose_name='address 1')),
                ('address2', models.CharField(blank=True, max_length=255, verbose_name='address 2')),
                ('city', models.CharField(blank=True, max_length=255, verbose_name='city')),
                ('state', models.CharField(blank=True, max_length=255, verbose_name='state')),
                ('zipcode', models.CharField(blank=True, max_length=48, verbose_name='ZIP Code')),
                ('country', django_countries.fields.CountryField(blank=True, max_length=2, verbose_name='country')),
                ('latitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True, verbose_name='latitude')),
                ('longitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True, verbose_name='longitude')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
                ('website', django_peeringdb.models.abstract.URLField(blank=True, max_length=255, verbose_name='website')),
                ('clli', models.CharField(blank=True, max_length=18, verbose_name='CLLI Code')),
                ('rencode', models.CharField(blank=True, max_length=18, verbose_name='rencode')),
                ('npanxx', models.CharField(blank=True, max_length=21, verbose_name='NPA-NXX')),
                ('notes', models.TextField(blank=True)),
            ],
            options={
                'abstract': False,
                'db_table': 'peeringdb_facility',
                'verbose_name': 'Facility',
                'verbose_name_plural': 'Facilities',
            },
            managers=[
                ('handleref', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='InternetExchange',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('status', models.CharField(blank=True, max_length=255, verbose_name='Status')),
                ('created', django_handleref.models.CreatedDateTimeField(auto_now_add=True, verbose_name='Created')),
                ('updated', django_handleref.models.UpdatedDateTimeField(auto_now=True, verbose_name='Updated')),
                ('version', models.IntegerField(default=0)),
                ('name', models.CharField(max_length=64, unique=True, verbose_name='name')),
                ('name_long', models.CharField(blank=True, max_length=254, verbose_name='long name')),
                ('city', models.CharField(max_length=192, verbose_name='city')),
                ('country', django_countries.fields.CountryField(max_length=2, verbose_name='country')),
                ('notes', models.TextField(blank=True, verbose_name='notes')),
                ('region_continent', models.CharField(choices=[('North America', 'North America'), ('Asia Pacific', 'Asia Pacific'), ('Europe', 'Europe'), ('South America', 'South America'), ('Africa', 'Africa'), ('Australia', 'Australia'), ('Middle East', 'Middle East')], max_length=255, verbose_name='continental region')),
                ('media', models.CharField(choices=[('Ethernet', 'Ethernet'), ('ATM', 'ATM'), ('Multiple', 'Multiple')], max_length=128, verbose_name='media type')),
                ('proto_unicast', models.BooleanField(default=False, verbose_name='unicast IPv4')),
                ('proto_multicast', models.BooleanField(default=False, verbose_name='multicast')),
                ('proto_ipv6', models.BooleanField(default=False, verbose_name='unicast IPv6')),
                ('website', django_peeringdb.models.abstract.URLField(blank=True, max_length=255, verbose_name='company website')),
                ('url_stats', django_peeringdb.models.abstract.URLField(blank=True, max_length=255, verbose_name='traffic stats website')),
                ('tech_email', models.EmailField(blank=True, max_length=254, verbose_name='technical email')),
                ('tech_phone', models.CharField(blank=True, max_length=192, verbose_name='technical phone')),
                ('policy_email', models.EmailField(blank=True, max_length=254, verbose_name='policy email')),
                ('policy_phone', models.CharField(blank=True, max_length=192, verbose_name='policy phone')),
            ],
            options={
                'abstract': False,
                'db_table': 'peeringdb_ix',
            },
            managers=[
                ('handleref', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='InternetExchangeFacility',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('status', models.CharField(blank=True, max_length=255, verbose_name='Status')),
                ('created', django_handleref.models.CreatedDateTimeField(auto_now_add=True, verbose_name='Created')),
                ('updated', django_handleref.models.UpdatedDateTimeField(auto_now=True, verbose_name='Updated')),
                ('version', models.IntegerField(default=0)),
                ('fac', models.ForeignKey(default=0, on_delete=django.db.models.deletion.CASCADE, related_name='ixfac_set', to='django_peeringdb.Facility', verbose_name='facility')),
                ('ix', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ixfac_set', to='django_peeringdb.InternetExchange', verbose_name='internet exchange')),
            ],
            options={
                'abstract': False,
                'verbose_name_plural': 'internet exchanges/facilities',
                'db_table': 'peeringdb_ix_facility',
                'verbose_name': 'internet exchange/facility',
            },
            managers=[
                ('handleref', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='IXLan',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('status', models.CharField(blank=True, max_length=255, verbose_name='Status')),
                ('created', django_handleref.models.CreatedDateTimeField(auto_now_add=True, verbose_name='Created')),
                ('updated', django_handleref.models.UpdatedDateTimeField(auto_now=True, verbose_name='Updated')),
                ('version', models.IntegerField(default=0)),
                ('name', models.CharField(blank=True, max_length=255, verbose_name='name')),
                ('descr', models.TextField(blank=True, verbose_name='description')),
                ('mtu', models.PositiveIntegerField(blank=True, null=True, verbose_name='MTU')),
                ('vlan', models.PositiveIntegerField(blank=True, null=True, verbose_name='VLAN')),
                ('dot1q_support', models.BooleanField(default=False, verbose_name='802.1Q')),
                ('rs_asn', django_inet.models.ASNField(blank=True, default=0, null=True, verbose_name='route server ASN')),
                ('arp_sponge', django_inet.models.MacAddressField(blank=True, max_length=17, null=True, unique=True, verbose_name='ARP sponging MAC')),
                ('ix', models.ForeignKey(default=0, on_delete=django.db.models.deletion.CASCADE, related_name='ixlan_set', to='django_peeringdb.InternetExchange', verbose_name='internet exchange')),
            ],
            options={
                'abstract': False,
                'db_table': 'peeringdb_ixlan',
                'verbose_name': 'internet exchange LAN',
                'verbose_name_plural': 'internet exchange LANs',
            },
            managers=[
                ('handleref', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='IXLanPrefix',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('status', models.CharField(blank=True, max_length=255, verbose_name='Status')),
                ('created', django_handleref.models.CreatedDateTimeField(auto_now_add=True, verbose_name='Created')),
                ('updated', django_handleref.models.UpdatedDateTimeField(auto_now=True, verbose_name='Updated')),
                ('version', models.IntegerField(default=0)),
                ('notes', models.CharField(blank=True, max_length=255, verbose_name='notes')),
                ('protocol', models.CharField(choices=[('IPv4', 'IPv4'), ('IPv6', 'IPv6')], max_length=64, verbose_name='protocol')),
                ('prefix', django_inet.models.IPPrefixField(max_length=43, unique=True, verbose_name='prefix')),
                ('ixlan', models.ForeignKey(default=0, on_delete=django.db.models.deletion.CASCADE, related_name='ixpfx_set', to='django_peeringdb.IXLan', verbose_name='internet exchange LAN')),
            ],
            options={
                'abstract': False,
                'db_table': 'peeringdb_ixlan_prefix',
                'verbose_name': 'internet exchange LAN prefix',
                'verbose_name_plural': 'internet exchange LAN prefixes',
            },
            managers=[
                ('handleref', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Network',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('status', models.CharField(blank=True, max_length=255, verbose_name='Status')),
                ('created', django_handleref.models.CreatedDateTimeField(auto_now_add=True, verbose_name='Created')),
                ('updated', django_handleref.models.UpdatedDateTimeField(auto_now=True, verbose_name='Updated')),
                ('version', models.IntegerField(default=0)),
                ('asn', django_inet.models.ASNField(unique=True, verbose_name='Primary ASN')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
                ('aka', models.CharField(blank=True, max_length=255, verbose_name='also known as')),
                ('irr_as_set', models.CharField(blank=True, max_length=255, verbose_name='IRR Record')),
                ('website', django_peeringdb.models.abstract.URLField(blank=True, max_length=255, verbose_name='company website')),
                ('looking_glass', django_peeringdb.models.abstract.URLField(blank=True, max_length=255, verbose_name='looking glass URL')),
                ('route_server', django_peeringdb.models.abstract.URLField(blank=True, max_length=255, verbose_name='route server URL')),
                ('notes', models.TextField(blank=True, verbose_name='notes')),
                ('notes_private', models.TextField(blank=True, verbose_name='private notes')),
                ('info_traffic', models.CharField(blank=True, choices=[('', 'Not Disclosed'), ('0-20 Mbps', '0-20 Mbps'), ('20-100Mbps', '20-100Mbps'), ('100-1000Mbps', '100-1000Mbps'), ('1-5Gbps', '1-5Gbps'), ('5-10Gbps', '5-10Gbps'), ('10-20Gbps', '10-20Gbps'), ('20-50 Gbps', '20-50 Gbps'), ('50-100 Gbps', '50-100 Gbps'), ('100+ Gbps', '100+ Gbps'), ('100-200 Gbps', '100-200 Gbps'), ('200-300 Gbps', '200-300 Gbps'), ('300-500 Gbps', '300-500 Gbps'), ('500-1000 Gbps', '500-1000 Gbps'), ('1 Tbps+', '1 Tbps+'), ('10 Tbps+', '10 Tbps+')], max_length=39, verbose_name='traffic levels')),
                ('info_ratio', models.CharField(blank=True, choices=[('', 'Not Disclosed'), ('Not Disclosed', 'Not Disclosed'), ('Heavy Outbound', 'Heavy Outbound'), ('Mostly Outbound', 'Mostly Outbound'), ('Balanced', 'Balanced'), ('Mostly Inbound', 'Mostly Inbound'), ('Heavy Inbound', 'Heavy Inbound')], default='Not Disclosed', max_length=45, verbose_name='traffic ratios')),
                ('info_scope', models.CharField(blank=True, choices=[('', 'Not Disclosed'), ('Not Disclosed', 'Not Disclosed'), ('Regional', 'Regional'), ('North America', 'North America'), ('Asia Pacific', 'Asia Pacific'), ('Europe', 'Europe'), ('South America', 'South America'), ('Africa', 'Africa'), ('Australia', 'Australia'), ('Middle East', 'Middle East'), ('Global', 'Global')], default='Not Disclosed', max_length=39, verbose_name='geographic scope')),
                ('info_type', models.CharField(blank=True, choices=[('', 'Not Disclosed'), ('Not Disclosed', 'Not Disclosed'), ('NSP', 'NSP'), ('Content', 'Content'), ('Cable/DSL/ISP', 'Cable/DSL/ISP'), ('Enterprise', 'Enterprise'), ('Educational/Research', 'Educational/Research'), ('Non-Profit', 'Non-Profit'), ('Route Server', 'Route Server')], default='Not Disclosed', max_length=60, verbose_name='network type')),
                ('info_prefixes4', models.PositiveIntegerField(blank=True, null=True, verbose_name='IPv4 Prefixes')),
                ('info_prefixes6', models.PositiveIntegerField(blank=True, null=True, verbose_name='IPv6 Prefixes')),
                ('info_unicast', models.BooleanField(default=False, verbose_name='unicast IPv4')),
                ('info_multicast', models.BooleanField(default=False, verbose_name='multicast')),
                ('info_ipv6', models.BooleanField(default=False, verbose_name='unicast IPv6')),
                ('policy_url', django_peeringdb.models.abstract.URLField(blank=True, max_length=255, verbose_name='peering policy')),
                ('policy_general', models.CharField(blank=True, choices=[('Open', 'Open'), ('Selective', 'Selective'), ('Restrictive', 'Restrictive'), ('No', 'No')], max_length=72, verbose_name='general policy')),
                ('policy_locations', models.CharField(blank=True, choices=[('Not Required', 'Not Required'), ('Preferred', 'Preferred'), ('Required - US', 'Required - US'), ('Required - EU', 'Required - EU'), ('Required - International', 'Required - International')], max_length=72, verbose_name='multiple locations')),
                ('policy_ratio', models.BooleanField(default=False, verbose_name='ratio requirement')),
                ('policy_contracts', models.CharField(blank=True, choices=[('Not Required', 'Not Required'), ('Private Only', 'Private Only'), ('Required', 'Required')], max_length=36, verbose_name='contract requirement')),
            ],
            options={
                'abstract': False,
                'db_table': 'peeringdb_network',
                'verbose_name': 'Network',
                'verbose_name_plural': 'Networks',
            },
            managers=[
                ('handleref', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='NetworkContact',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('status', models.CharField(blank=True, max_length=255, verbose_name='Status')),
                ('created', django_handleref.models.CreatedDateTimeField(auto_now_add=True, verbose_name='Created')),
                ('updated', django_handleref.models.UpdatedDateTimeField(auto_now=True, verbose_name='Updated')),
                ('version', models.IntegerField(default=0)),
                ('role', models.CharField(choices=[('Abuse', 'Abuse'), ('Maintenance', 'Maintenance'), ('Policy', 'Policy'), ('Technical', 'Technical'), ('NOC', 'NOC'), ('Public Relations', 'Public Relations'), ('Sales', 'Sales')], max_length=27, verbose_name='role')),
                ('visible', models.CharField(choices=[('Private', 'Private'), ('Users', 'Users'), ('Public', 'Public')], default='Public', max_length=64, verbose_name='visibility')),
                ('name', models.CharField(blank=True, max_length=254, verbose_name='name')),
                ('phone', models.CharField(blank=True, max_length=100, verbose_name='phone')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email')),
                ('url', django_peeringdb.models.abstract.URLField(blank=True, max_length=255, verbose_name='URL')),
                ('net', models.ForeignKey(default=0, on_delete=django.db.models.deletion.CASCADE, related_name='poc_set', to='django_peeringdb.Network', verbose_name='network')),
            ],
            options={
                'abstract': False,
                'db_table': 'peeringdb_network_contact',
                'verbose_name': 'Contact',
                'verbose_name_plural': 'Contacts',
            },
            managers=[
                ('handleref', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='NetworkFacility',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('status', models.CharField(blank=True, max_length=255, verbose_name='Status')),
                ('created', django_handleref.models.CreatedDateTimeField(auto_now_add=True, verbose_name='Created')),
                ('updated', django_handleref.models.UpdatedDateTimeField(auto_now=True, verbose_name='Updated')),
                ('version', models.IntegerField(default=0)),
                ('local_asn', django_inet.models.ASNField(blank=True, null=True, verbose_name='local ASN')),
                ('avail_sonet', models.BooleanField(default=False, verbose_name='SONET')),
                ('avail_ethernet', models.BooleanField(default=False, verbose_name='Ethernet')),
                ('avail_atm', models.BooleanField(default=False, verbose_name='ATM')),
                ('fac', models.ForeignKey(default=0, on_delete=django.db.models.deletion.CASCADE, related_name='netfac_set', to='django_peeringdb.Facility', verbose_name='facility')),
                ('net', models.ForeignKey(default=0, on_delete=django.db.models.deletion.CASCADE, related_name='netfac_set', to='django_peeringdb.Network', verbose_name='network')),
            ],
            options={
                'abstract': False,
                'verbose_name_plural': 'networks/facilities',
                'db_table': 'peeringdb_network_facility',
                'verbose_name': 'network/facility',
            },
            managers=[
                ('handleref', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='NetworkIXLan',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('status', models.CharField(blank=True, max_length=255, verbose_name='Status')),
                ('created', django_handleref.models.CreatedDateTimeField(auto_now_add=True, verbose_name='Created')),
                ('updated', django_handleref.models.UpdatedDateTimeField(auto_now=True, verbose_name='Updated')),
                ('version', models.IntegerField(default=0)),
                ('asn', django_inet.models.ASNField(verbose_name='ASN')),
                ('ipaddr4', django_inet.models.IPAddressField(blank=True, max_length=39, null=True, verbose_name='IPv4')),
                ('ipaddr6', django_inet.models.IPAddressField(blank=True, max_length=39, null=True, verbose_name='IPv6')),
                ('is_rs_peer', models.BooleanField(default=False, verbose_name='route server peer')),
                ('notes', models.CharField(blank=True, max_length=255, verbose_name='notes')),
                ('speed', models.PositiveIntegerField(help_text='Mbps', verbose_name='speed')),
                ('ixlan', models.ForeignKey(default=0, on_delete=django.db.models.deletion.CASCADE, related_name='netixlan_set', to='django_peeringdb.IXLan', verbose_name='internet exchange LAN')),
                ('net', models.ForeignKey(default=0, on_delete=django.db.models.deletion.CASCADE, related_name='netixlan_set', to='django_peeringdb.Network', verbose_name='network')),
            ],
            options={
                'abstract': False,
                'db_table': 'peeringdb_network_ixlan',
                'verbose_name': 'network/internet exchange LAN',
                'verbose_name_plural': 'networks/internet exchange LANs',
            },
            managers=[
                ('handleref', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('status', models.CharField(blank=True, max_length=255, verbose_name='Status')),
                ('created', django_handleref.models.CreatedDateTimeField(auto_now_add=True, verbose_name='Created')),
                ('updated', django_handleref.models.UpdatedDateTimeField(auto_now=True, verbose_name='Updated')),
                ('version', models.IntegerField(default=0)),
                ('address1', models.CharField(blank=True, max_length=255, verbose_name='address 1')),
                ('address2', models.CharField(blank=True, max_length=255, verbose_name='address 2')),
                ('city', models.CharField(blank=True, max_length=255, verbose_name='city')),
                ('state', models.CharField(blank=True, max_length=255, verbose_name='state')),
                ('zipcode', models.CharField(blank=True, max_length=48, verbose_name='ZIP Code')),
                ('country', django_countries.fields.CountryField(blank=True, max_length=2, verbose_name='country')),
                ('latitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True, verbose_name='latitude')),
                ('longitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True, verbose_name='longitude')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
                ('website', django_peeringdb.models.abstract.URLField(blank=True, max_length=255, verbose_name='website')),
                ('notes', models.TextField(blank=True, verbose_name='notes')),
            ],
            options={
                'abstract': False,
                'db_table': 'peeringdb_organization',
                'verbose_name_plural': 'Organizations',
            },
            managers=[
                ('handleref', django.db.models.manager.Manager()),
            ],
        ),
        migrations.AddField(
            model_name='network',
            name='org',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='net_set', to='django_peeringdb.Organization', verbose_name='organization'),
        ),
        migrations.AddField(
            model_name='internetexchange',
            name='org',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ix_set', to='django_peeringdb.Organization', verbose_name='organization'),
        ),
        migrations.AddField(
            model_name='facility',
            name='org',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fac_set', to='django_peeringdb.Organization', verbose_name='organization'),
        ),
        migrations.AlterUniqueTogether(
            name='networkfacility',
            unique_together=set([('net', 'fac', 'local_asn')]),
        ),
        migrations.AlterUniqueTogether(
            name='internetexchangefacility',
            unique_together=set([('ix', 'fac')]),
        ),
    ]
